[{"title":"JavaSE 数据类型与运算","date":"2023-09-18T09:02:43.000Z","url":"/2023/09/18/JavaSE-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8E%E8%BF%90%E7%AE%97/","tags":[["javaSE","/tags/javaSE/"],["java","/tags/java/"]],"categories":[["复习","/categories/%E5%A4%8D%E4%B9%A0/"]],"content":"关键字 java 运行过程中内置的一些单词或者是保留字 标识符 命名规范 由 26 个字母大小写,数字,_,$组成 数字不能开头 严格区分大小写,不能为关键字但是可以包含关键字 例如 publishList 命名规则 类名遵循大驼峰方式 例如 HelloTest.class 包名全小写 方法名遵循小驼峰方式 例如 send 常量全大写并且用下划线连接 例如 COUNT_MAX 数据类型 基本数据类型 byte 1 字节 8bit 2^8 short 2 字节 16bit 2^16 int 4 字节 32bit 2^32 long 8 字节 64bit 2^64 定义的时候需要在末尾加上’l’或’L’方便与 int 进行区分 例如 long num&#x3D;123L char 2 字节 只能输入一个字符例如 char ca&#x3D; ‘a’ 可以输入数字或者其他转义字符等 char n&#x3D;97 char a&#x3D;’\\u0006’ 可以和其他类型进行运算操作 float 4 字节 -3.410(-38)～ 3.410(38) 定义的时候需要在末尾加上’F’或’f’方便与 double 进行区分 例如 float num&#x3D;12.3f double 8 字节 -1.710(-308)～ 1.710(308) boolean 1bit 只用存 true or false 引用数据类型 String 接口 类 枚举 注解 数组 集合 …… 类型计算 整数定义变量默认为 int 类型 int a&#x3D;123 小数定义变量默认为 double 类型 double d&#x3D;3.14 char 可以和其他整数基本类型进行计算操作 如 char b&#x3D;123+’a’ char,byte,short 参与的计算都会自动转换成 int 类型 byte a&#x3D;12 int b&#x3D;a+’a’ 类型转换 强制类型转换 从大类型转换为小类型 浮点型转换成整数类型可能会存在精度丢失问题 自动类型转换 从小类型转换为大类型执行顺序为 计算机底层存储 进制 二进制 由 0,1 组成 计算机中储存的形式为二进制 9 1001 6 110 八进制 由 0-7 数字组成，为了区分与其他进制的数字区别，开头都是以 0 开始 十六进制 由 0-9 和 A-F 组成。为了区分于其他数字的区别，开头都是以 0x 开始 进制转换 十进制转换成二进制 将十进制的数跟 2 进行取余最后逆序排列 二进制转换成十进制 将二进制的数从右到左 位数*2^(n-1) 二进制转换成八进制 将二进制三个分为一组进行二进制相加 二进制转换成十六进制 将二进制四个分为一组进行二进制相加 原码,反码,补码 原码 二进制数据 得到反码和补码的基础 反码 在二进制的基础上最左边符号位不动其他位置取反 补码 在反码的基础上最左边符号位和其他位置都不变只+1 计算机中储存的是补码,计算的时候也是使用补码进行计算 运算符 算数运算符 +, - , * , &#x2F; , % , (前)++ , ++(后) , (前)– , –(后) (前)++ 先+1 再计算 ++(后) 先计算再++ 赋值运算符 &#x3D; , +&#x3D; , -&#x3D; , *&#x3D; , %&#x3D; 当&#x3D;两侧数据类型不一致的时候,可以进行自动类型转换或者强制类型转换处理 支持连续赋值 +&#x3D; , -&#x3D; , *&#x3D; , %&#x3D; 操作不会改变本身的数据类型 比较运算符 &#x3D;&#x3D; , !&#x3D; , &gt;&#x3D; , &lt;&#x3D; , &gt; , &lt; , instanceof instanceof 是面向多态中的知识 &#x3D;&#x3D; , !&#x3D; , &gt;&#x3D; , &lt;&#x3D; , &gt; , &lt; 适用于基本数据类型(&gt;&#x3D; , &lt;&#x3D; , &gt; , &lt;不能适用 boolean 类型) &#x3D;&#x3D; , !&#x3D; 可以适用于引用数据类型 区分 &#x3D;&#x3D; , &#x3D; 逻辑运算符 &amp; , &amp;&amp; , | , || , ! , ^ &amp; 与 &amp;&amp; 区别 &amp;&amp;为短路与当前一个条件判断为 false 的时候则不执行下一个判断条件直接给出 false | 与 || 区别 ||为短路或当前一个条件判断为 true 的时候则不执行下一个判断条件直接给出 true ! 取反 ^ 异或 当比较双方有且只有一个 true 的时候返回 true 其他都返回 false 位运算符 &lt;&lt; , &gt;&gt; , &gt;&gt;&gt; , &amp; , | , ^ , ~ 计算性能会更高 2 &lt;&lt; 3 : 2*2^3 2 &gt;&gt; 3 : 2&#x2F;2^3 -2 &gt;&gt;&gt; 3 : -(2&#x2F;2^3) 条件运算 三目运算 (x &gt; y) ? x : y 解释 如果 x 大于 y 那么就选择 x 否则选择 y 总结"},{"title":"JavaSE 初识java","date":"2023-09-18T08:56:10.000Z","url":"/2023/09/18/JavaSE-%E5%88%9D%E8%AF%86java/","tags":[["javaSE","/tags/javaSE/"],["java","/tags/java/"]],"categories":[["复习","/categories/%E5%A4%8D%E4%B9%A0/"]],"content":"运行 创建一个 Hello.text 文件,将后缀改为.java 编辑文件代码如下 进入文件所在目录输入编译命令 javac Hello.java 运行编译文件 java HelloChina 注释 java 注释种类 单行注释 &#x2F;&#x2F; 多行注释 &#x2F;* &#x2F; 文档注释 &#x2F;** &#x2F; 注释的作用 对程序中的代码做解释作用 对程序进行调试 注意 单行注释和多行注释不参与程序的编译,就是说你在代码中写再多的注释编译的时候都会去掉,但是文档注释会参加编译 多行注释不能嵌套使用 文档注释 文档注释内容会被 jdk 提供的工具 javadoc 识别解析,生成一套以网页文件形式体现的该程序说明文档 总结 怎么解释 java 是半编译边运行语言? 解释重点在运行这一块,首先明确只有在 javac 编译完成生成了.class 的字节码文件才可以运行.所以在运行阶段 jvm 会读到整个.class 文件然后自行决定如果运行可能是一半一半的读和运行也可能是一整个读然后运行 "},{"title":"2023-8-31","date":"2023-08-31T15:09:58.000Z","url":"/2023/08/31/2023-8-31/","tags":[["hexo","/tags/hexo/"]],"categories":[["日记","/categories/%E6%97%A5%E8%AE%B0/"]],"content":"今天搭建好了我的博客网站,现在进行一些测试多多包涵. 测试跳转链接 hexo 测试图片 测试二级标题我是一段普通的测试句"}]